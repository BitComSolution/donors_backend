version: '3.8'

services:
  app:
    container_name: ${SERVICE}-app
    working_dir: /app
    build:
      context: .
      dockerfile: DevDockerfile
    volumes:
      - .:/app
    depends_on:
      - redis
      - pgbouncer
    networks:
      - donors_infrastructure
      - infrastructure
    environment:
      - LETSENCRYPT_HOST=${DOMAIN}
      - VIRTUAL_HOST=${DOMAIN}
      - VIRTUAL_PORT=8000

  pgbouncer:
    container_name: ${SERVICE}-pgbouncer
    image: pgbouncer/pgbouncer:latest
    restart: unless-stopped
    tty: true
    environment:
      DATABASES_HOST: db
      DATABASES_PORT: 5432
      DATABASES_USER: ${DB_USERNAME}
      DATABASES_PASSWORD: ${DB_PASSWORD}
      DATABASES_DBNAME: ${DB_DATABASE}
      PGBOUNCER_POOL_MODE: ${PGBOUNCER_POOL_MODE}
      PGBOUNCER_MAX_CLIENT_CONN: ${PGBOUNCER_MAX_CLIENT_CONN}
      PGBOUNCER_DEFAULT_POOL_SIZE: ${PGBOUNCER_DEFAULT_POOL_SIZE}
      PGBOUNCER_MIN_POOL_SIZE: ${PGBOUNCER_MIN_POOL_SIZE}
      PGBOUNCER_SERVER_RESET_QUERY: ${PGBOUNCER_SERVER_RESET_QUERY}
      PGBOUNCER_LOGFILE: ${PGBOUNCER_LOGFILE}
    volumes:
      - donors_pgbouncer:/var/log/pgbouncer
    networks:
      - infrastructure
    depends_on:
      - db
    ports:
      - "${PGBOUNCER_PORT}:6432"

  reverse-proxy:
    image: "jwilder/nginx-proxy:latest"
    container_name: ${SERVICE}-reverse-proxy
    volumes:
      - "html:/usr/share/nginx/html"
      - "dhparam:/etc/nginx/dhparam"
      - "vhost:/etc/nginx/vhost.d"
      - "certs:/etc/nginx/certs"
      - "/run/docker.sock:/tmp/docker.sock:ro"
    restart: unless-stopped
    networks:
      - donors_infrastructure
    ports:
      - "80:80"
      - "443:443"

  letsencrypt:
    image: "jrcs/letsencrypt-nginx-proxy-companion:latest"
    container_name: ${SERVICE}-letsencrypt
    restart: unless-stopped
    volumes:
      - "html:/usr/share/nginx/html"
      - "dhparam:/etc/nginx/dhparam"
      - "vhost:/etc/nginx/vhost.d"
      - "certs:/etc/nginx/certs"
      - "/run/docker.sock:/var/run/docker.sock:ro"
    environment:
      NGINX_PROXY_CONTAINER: ${SERVICE}-reverse-proxy
      DEFAULT_EMAIL: "${EMAIL}"
    depends_on:
      - "reverse-proxy"
    networks:
      - donors_infrastructure

volumes:
  certs:
  html:
  vhost:
  dhparam:
  donors_pgbouncer: {}

networks:
  infrastructure:
    name: ${SERVICE}_donors_infrastructure
    driver: bridge

  donors_infrastructure:
    name: donors_infrastructure
    driver: bridge
